     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_io_out8
     7 00000000                                 	EXTERN	_io_in8
     8 00000000                                 	EXTERN	_fifo32_put
     9 00000000                                 	EXTERN	_wait_KBC_sendready
    10 00000000                                 [FILE "mouse.c"]
    11                                          [SECTION .text]
    12 00000000                                 	GLOBAL	_inthandler2c
    13 00000000                                 _inthandler2c:
    14 00000000 55                              	PUSH	EBP
    15 00000001 89 E5                           	MOV	EBP,ESP
    16 00000003 6A 64                           	PUSH	100
    17 00000005 68 000000A0                     	PUSH	160
    18 0000000A E8 [00000000]                   	CALL	_io_out8
    19 0000000F 6A 62                           	PUSH	98
    20 00000011 6A 20                           	PUSH	32
    21 00000013 E8 [00000000]                   	CALL	_io_out8
    22 00000018 6A 60                           	PUSH	96
    23 0000001A E8 [00000000]                   	CALL	_io_in8
    24 0000001F 0F B6 C0                        	MOVZX	EAX,AL
    25 00000022 03 05 [00000004]                	ADD	EAX,DWORD [_mousedata0]
    26 00000028 50                              	PUSH	EAX
    27 00000029 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
    28 0000002F E8 [00000000]                   	CALL	_fifo32_put
    29 00000034 C9                              	LEAVE
    30 00000035 C3                              	RET
    31 00000036                                 	GLOBAL	_enable_mouse
    32 00000036                                 _enable_mouse:
    33 00000036 55                              	PUSH	EBP
    34 00000037 89 E5                           	MOV	EBP,ESP
    35 00000039 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    36 0000003C A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
    37 00000041 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
    38 00000044 A3 [00000004]                   	MOV	DWORD [_mousedata0],EAX
    39 00000049 E8 [00000000]                   	CALL	_wait_KBC_sendready
    40 0000004E 68 000000D4                     	PUSH	212
    41 00000053 6A 64                           	PUSH	100
    42 00000055 E8 [00000000]                   	CALL	_io_out8
    43 0000005A E8 [00000000]                   	CALL	_wait_KBC_sendready
    44 0000005F 68 000000F4                     	PUSH	244
    45 00000064 6A 60                           	PUSH	96
    46 00000066 E8 [00000000]                   	CALL	_io_out8
    47 0000006B 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
    48 0000006E C6 40 03 00                     	MOV	BYTE [3+EAX],0
    49 00000072 C9                              	LEAVE
    50 00000073 C3                              	RET
    51 00000074                                 	GLOBAL	_mouse_decode
    52 00000074                                 _mouse_decode:
    53 00000074 55                              	PUSH	EBP
    54 00000075 89 E5                           	MOV	EBP,ESP
    55 00000077 56                              	PUSH	ESI
    56 00000078 53                              	PUSH	EBX
    57 00000079 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    58 0000007C 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
    59 0000007F 89 CE                           	MOV	ESI,ECX
    60 00000081 8A 42 03                        	MOV	AL,BYTE [3+EDX]
    61 00000084 84 C0                           	TEST	AL,AL
    62 00000086 75 11                           	JNE	L4
    63 00000088 80 F9 FA                        	CMP	CL,-6
    64 0000008B 74 06                           	JE	L13
    65 0000008D                                 L12:
    66 0000008D 31 C0                           	XOR	EAX,EAX
    67 0000008F                                 L3:
    68 0000008F 5B                              	POP	EBX
    69 00000090 5E                              	POP	ESI
    70 00000091 5D                              	POP	EBP
    71 00000092 C3                              	RET
    72 00000093                                 L13:
    73 00000093 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    74 00000097 EB F4                           	JMP	L12
    75 00000099                                 L4:
    76 00000099 3C 01                           	CMP	AL,1
    77 0000009B 74 61                           	JE	L14
    78 0000009D 3C 02                           	CMP	AL,2
    79 0000009F 74 54                           	JE	L15
    80 000000A1 3C 03                           	CMP	AL,3
    81 000000A3 74 05                           	JE	L16
    82 000000A5 83 C8 FF                        	OR	EAX,-1
    83 000000A8 EB E5                           	JMP	L3
    84 000000AA                                 L16:
    85 000000AA 8A 1A                           	MOV	BL,BYTE [EDX]
    86 000000AC 81 E6 000000FF                  	AND	ESI,255
    87 000000B2 89 D8                           	MOV	EAX,EBX
    88 000000B4 88 4A 02                        	MOV	BYTE [2+EDX],CL
    89 000000B7 83 E0 07                        	AND	EAX,7
    90 000000BA 89 72 08                        	MOV	DWORD [8+EDX],ESI
    91 000000BD 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    92 000000C0 88 D8                           	MOV	AL,BL
    93 000000C2 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    94 000000C6 83 E0 10                        	AND	EAX,16
    95 000000C9 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    96 000000CC C6 42 03 01                     	MOV	BYTE [3+EDX],1
    97 000000D0 84 C0                           	TEST	AL,AL
    98 000000D2 74 09                           	JE	L10
    99 000000D4 81 C9 FFFFFF00                  	OR	ECX,-256
   100 000000DA 89 4A 04                        	MOV	DWORD [4+EDX],ECX
   101 000000DD                                 L10:
   102 000000DD 83 E3 20                        	AND	EBX,32
   103 000000E0 84 DB                           	TEST	BL,BL
   104 000000E2 74 07                           	JE	L11
   105 000000E4 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
   106 000000EB                                 L11:
   107 000000EB F7 5A 08                        	NEG	DWORD [8+EDX]
   108 000000EE B8 00000001                     	MOV	EAX,1
   109 000000F3 EB 9A                           	JMP	L3
   110 000000F5                                 L15:
   111 000000F5 88 4A 01                        	MOV	BYTE [1+EDX],CL
   112 000000F8 C6 42 03 03                     	MOV	BYTE [3+EDX],3
   113 000000FC EB 8F                           	JMP	L12
   114 000000FE                                 L14:
   115 000000FE 83 E6 C8                        	AND	ESI,-56
   116 00000101 89 F0                           	MOV	EAX,ESI
   117 00000103 3C 08                           	CMP	AL,8
   118 00000105 75 86                           	JNE	L12
   119 00000107 88 0A                           	MOV	BYTE [EDX],CL
   120 00000109 C6 42 03 02                     	MOV	BYTE [3+EDX],2
   121 0000010D E9 FFFFFF7B                     	JMP	L12
   122 00000112                                 	GLOBAL	_mousefifo
   123                                          [SECTION .data]
   124 00000000                                 	ALIGNB	4
   125 00000000                                 _mousefifo:
   126 00000000 00 00 00 00                     	RESB	4
   127 00000004                                 	GLOBAL	_mousedata0
   128                                          [SECTION .data]
   129 00000004                                 	ALIGNB	4
   130 00000004                                 _mousedata0:
   131 00000004 00 00 00 00                     	RESB	4
